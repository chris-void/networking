ini

def write_results(results, f=sys.stdout):
    """Writes the results table to the file-like object `f`.

    The elements of the results table must be accessible by the expression::

        results[delay][measurement_type][message_size][trial_num]

    and the value of that expression is a list of length `NUM_PROBES`
    containing the measured values of type `measurement_type`.

    """
    f.write('# written at {}\n'.format(datetime.now().isoformat()))
    f.write('# delay measurement_type msg_size trial_num probe_num value\n')
    for delay in SERVER_DELAYS:
        for m, sizes in MEASUREMENTS.items():
            for size in sizes:
                for trial_num in range(NUM_TRIALS):
                    values = results[delay][m][size][trial_num]
                    assert len(values) == NUM_PROBES
                    for probe_num in range(NUM_PROBES):
                        f.write(' '.join(('{}' for n in range(6)))
                                .format(delay, m, size, trial_num, probe_num,
                                        values[probe_num]))
                        f.write('\n')


if __name__ == '__main__':
    if len(sys.argv) < 3:
        logging.critical('Must specify host and port on which the server is'
                         ' running. For example:')
        logging.critical('    ./client.py <hostname> <portnumber>')
        sys.exit(1)
    if len(sys.argv) >= 4 and sys.argv[3].lower() == 'debug':
        logging.basicConfig(level=logging.DEBUG)
    host, port = sys.argv[1:3]
    main(host, port)



##
# Connection Setup Phase
##
def connectionsetup(self, measure_type, msg_size):
    def __init__(self):
        PROTOCOL_PHASE = 's'
        MEASURE_TYPE = measure_type
        #PROBES
        MSG_SIZe = msg_size
        SERVER_DELAY = 0 # default

    # create a INET, STREAMing socket
    
    ##exception
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((HOST, PORT))      

    # connect established


s.send('Hello, world')
data = s.recv(1024)
s.close()

print 'Received From Server:', repr(data)


#
# <PROTOCOL PHASE><WS><MEASUREMENT TYPE><WS><NUMBER OF PROBES><WS><MESSAGE SIZE><WS><SERVER DELAY>\n
#msg1 = "'s' rtt <NUMBER OF PROBES> byte# <SERVER DELAY>\n" 
#msg2 = "'s' tput"


# send probe msg to cal mean rtt and throughput
## 
# Measurement Phase
##
def measure(self):
    def __init__(self):
        PROTOCOL_PHASE = 'm'
    
## msg format:
## <PROTOCOL PHASE>< ><MEASUREMENT TYPE>< ><NUMBER OF PROBES>< ><MESSAGE SIZE>< ><SERVER DELAY>\n



##
# Connection Termination Phase
##
def connectionterminate(self):
    pass

## msg format:
## <PROTOCOL PHASE>\n
